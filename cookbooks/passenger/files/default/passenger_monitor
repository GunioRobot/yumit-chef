#!/usr/bin/env ruby
#
# watch for bloating passengers and kill them gracefully if possible (SIGUSR), then with extreme prejudice (SIGTERM)
#

require 'yaml'

# required by passenger
ENV['HTTPD'] = 'apache2'

config_path = File.dirname(__FILE__) + "/../config/passenger.yml"
config = YAML.load(File.read(config_path)) if File.exists?(config_path)

MEM_LIMIT = config['memory_limit'] || ARGV[0] || 500

module Process
  def self.running?(pid)
    begin
      return Process.getpgid(pid) != -1
    rescue Errno::ESRCH
      return false
    end
  end
end

`passenger-memory-stats`.each_line do |line|
  if line =~ /Rails: /
    parts = line.split
    pid, private_dirty_rss = parts[0].to_i, parts[4].to_f
    if private_dirty_rss > MEM_LIMIT.to_i
      puts "Found bloater #{pid} with size #{private_dirty_rss.to_s}"
      puts "Killing with SIGUSR1 (graceful)..."
      Process.kill("SIGUSR1", pid)
      puts "Finished kill attempt. Sleeping for 8 seconds..."
      sleep 8
      if Process.running?(pid)
        puts "Process is still running, so killing with extreme predjudice!"
        Process.kill("TERM", pid)
      end
      puts "Done!"
    end
  end
end